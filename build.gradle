import java.util.zip.ZipFile
import org.apache.commons.io.IOUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-io:commons-io:2.4'
    }
}

apply plugin: 'groovy'

version = '1.0'
def exotLibs = 'lib'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.9'
    compile 'cz.geek:gooddata-java:0.10.0'
    compile 'org.apache.commons:commons-csv:1.1'
    runtime 'org.python:jython:2.5.3'
    compile fileTree(dir: exotLibs, include: '*.jar')
    testCompile group: 'junit', name: 'junit', version: '4.11'

}

task smokeHealthGD(type: JavaExec, dependsOn: compileGroovy) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'SmokeHealthGd'
    args = project.properties.with {
        return [splunkUser, splunkPass, gdUser, gdPass, gdProject, ads]
    }

}

task downloadExots {
    ['https://developer.gooddata.com/downloads/dss/ads-driver.zip',
     'http://download.splunk.com/misc/sdk/java/splunk-sdk-java-1.3.1.jar']
            .each {
        def file = new FileOutputStream(exotLibs +  '/' + it.tokenize("/")[-1])
        def out = new BufferedOutputStream(file)
        out << new URL(it).openStream()
        out.close()
    }

    // unzip ads driver
    def adsDriver = new File("$exotLibs/ads-driver.zip")
    def zip = new ZipFile(adsDriver)
    zip.entries().each {
        IOUtils.copy(zip.getInputStream(it), new FileOutputStream("$exotLibs/${it.name}"))
    }
    zip.close()
    adsDriver.delete()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}
